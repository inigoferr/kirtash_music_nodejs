#!/usr/bin/env node


//
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('kirtash-music-node:server');
var http = require('http');

const compression = require('compression');
app.use(compression());

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

/**
 * WebSockets: Connection of the users, events...
 */
io.on('connection', function (socket) {
  console.log('User connected');

  //The user joins a specific room where are all the users of the session
  socket.on('join_room', function (room) {
    socket.join(room);
    var id = socket.id;
    
    //New user needs to know the time of the song being played
    //1ยบ: Ask one user of the room for the time
    var clients_in_the_room = io.sockets.adapter.rooms[room]; 

    if(clients_in_the_room.length > 1){

      for (var clave in clients_in_the_room.sockets){ //Obtain socket id's of the room
        if (clave.localeCompare(id) != 0){
          var client_socket = io.sockets.connected[clave];//Do whatever you want with this
          client_socket.emit('ask_time_player');
      
          //We make the user to add a new room where there are all the users waiting for that specific session
          //waiting_room = room + "_waiting";
          socket.join(room + "_waiting");
        }
      }
      
    }
  });

  /**
   * Send the time of the player to the new users
   */
  socket.on('answer_time_player',function(data){
    //time = data["time"];
    //room = data["room"];
    //waiting_room = room + "_waiting";
    socket.to(data["room"] + "_waiting").emit('time_player',data["time"]);    
    socket.to(data["room"] + "_waiting").emit('leave_waiting_room');
  });

  /**
   * User wants to leave waiting room
   */
  socket.on('leave_room',function(room){
    socket.leave(room);
  })

  //The user leaves the session, automatically he leaves the room he was too
  socket.on('disconnect', function (reason) {
    console.log("Disconnection");
  });

  //New Vote
  socket.on('new_vote', function (data) {
    //We have to send to the rest of the users in the room they must update the playlist
    var room = data["room"];
    socket.to(room).emit('update_playlist',1);
  });

  //New Song in the playlist
  socket.on('new_song', function (data) {
    var room = data["room"];
    socket.to(room).emit('update_playlist',2);
  });

  //Song retired but there are more songs to play
  socket.on('song_retired', function (data) {
    var room = data["room"];
    socket.to(room).emit('update_playlist',3);
  });

  //Song retired and no more songs
  socket.on('song_retired_no_more_songs',function(data){
    var room = data["room"];
    socket.to(room).emit('no_more_songs_black_image');
  })

  //Song removed by one admin
  socket.on('song_removed',function(data){
    var room = data["room"];
    socket.to(room).emit('update_playlist',4);
  });

  //Song ended we'll be treat by the server with the 2 following events: new_song_in_the_player or 
  //no_song_in_player depending if there are more songs to be played or not

  //The player has a song and the rest of the user most know it
  socket.on('new_song_in_player',function(data){
    var room = data["room"];
    socket.to(room).emit('update_player');
  });

  //The session hasn't more songs to play, the rest of the users must update his player
  socket.on('no_song_in_player',function(data){
    var room = data["room"];
    socket.to(room).emit('update_player_no_song');
  });

  socket.on('check_proportion_values',function(data){
    var room = data["room"];
    var num_users = io.sockets.adapter.rooms[room].length;
    if(parseInt(num_users) >= parseInt(data["min_users"])){ //Check if there're enough users in the room
      if (parseInt(data["max_mark"]) >= parseInt(data["min_votes"])){
        socket.to(room).emit('proportion_correct');
        socket.emit('proportion_correct');
      }
    }
  });

  //CHAT
  //Nuevo mensaje
  socket.on('new-message', function (data) {

  });

});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
