#!/usr/bin/env node


//
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('kirtash-music-node:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */
var waiting_users = {"rooms":{}};


//create socket io
io.on('connection', function (socket) {
  console.log('a user connected');


  //The user joins a specific room where are all the users of the session
  socket.on('join_room', function (room) {
    socket.join(room);
    console.log("User joins room = " + room);
    id = socket.id;
    
    //New user needs to know the time of the song being played
    //1º: Ask one user of the room for the time
    var clients_in_the_room = io.sockets.adapter.rooms[room]; 
    console.log(clients_in_the_room);
    console.log(clients_in_the_room.sockets);
    console.log(clients_in_the_room.sockets[0]);
    console.log(clients_in_the_room.length);
    if(clients_in_the_room.length > 1){

      for (var clave in clients_in_the_room.sockets){ //Obtain socket id's of the room
        if (clave.localeCompare(id) != 0){
          var client_socket = io.sockets.connected[clave];//Do whatever you want with this
          client_socket.emit('ask_time_player');
      
          //We add the socket of the new user to send him after the time
          waiting_users.rooms[room] = socket;
          console.log(waiting_users);

          break;
        }
      }
      
    }
  });

  /**
   * Send the time of the player to the new users
   */
  socket.on('answer_time_player',function(data){
    time = data["time"];
    room = data["room"];

    waiting_users.rooms[room].forEach(function(elem){
        (waiting_users.rooms[elem]).emit('time_player',time);
        delete waiting_users.rooms.elem;
    });

  });

  //The user leaves the session, automatically he leaves the room he was too
  socket.on('disconnect', function (reason) {
    console.log("Disconnection");
    console.log(reason);
  });

  //New Vote
  socket.on('new_vote', function (data) {
    //We have to send to the rest of the users in the room they must update the playlist
    room = data["room"];
    socket.to(room).emit('update_playlist');
  });

  //New Song in the playlist
  socket.on('new_song', function (data) {
    room = data["room"];
    socket.to(room).emit('update_playlist');
  });

  //Song retired but there are more songs to play
  socket.on('song_retired', function (data) {
    room = data["room"];
    socket.to(room).emit('update_playlist');
  });

  //Song retired and no more songs
  socket.on('song_retired_no_more_songs',function(data){
    room = data["room"];
    socket.to(room).emit('no_more_songs_black_image');
  })

  //Song ended??

  //CHAT
  //Nuevo mensaje
  socket.on('new-message', function (data) {

  });

});


/* socket.emit('messages',messages);

    //El servidor recibe el evento 'new-message' y hace lo que le digamos en la función
    socket.on('new-message',function(data){
        messages.push(data);

        //Utilizamos el servidor completo 'io' para avisar a TODOS los clientes de que hay un nuevo mensaje
        io.sockets.emit('messages',messages);
    });

    /*socket.on('checksignin',function(data){
        result = sign_in(data["username"],data["pass_user"],req);

        socket.emit('checksignin_answer',);
    });*/

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
